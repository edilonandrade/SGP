// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Tests.SGP.Features.GROT._01_Bloco01._01_01_CenariosIncompativeis
{
    using TechTalk.SpecFlow;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("01.01 - Criar listagem de cenarios incompativeis", new string[] {
            "kill_Driver"}, Description = "Narrativa:\r\n\tEu como adminstrador do sistema\r\n\tQuero criar um novo Capítulo no SG" +
        "P\r\n\tPara ter controle dos Capítulos e Cenas que serão roterizados", SourceFile = "Features\\GROT\\01 - Bloco 01\\01.01 - Cenários incompatíveis\\01.01 - CenariosIncomp" +
        ".feature", SourceLine = 7)]
    public partial class _01_01_CriarListagemDeCenariosIncompativeisFeature
    {

        private TechTalk.SpecFlow.ITestRunner testRunner;

#line 1 "01.01 - CenariosIncomp.feature"
#line hidden

        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "01.01 - Criar listagem de cenarios incompativeis", "Narrativa:\r\n\tEu como adminstrador do sistema\r\n\tQuero criar um novo Capítulo no SG" +
                    "P\r\n\tPara ter controle dos Capítulos e Cenas que serão roterizados", ProgrammingLanguage.CSharp, new string[] {
                        "kill_Driver"});
            testRunner.OnFeatureStart(featureInfo);
        }

        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        public virtual void TestInitialize()
        {
        }

        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        public virtual void FeatureBackground()
        {
#line 15
#line 16
            testRunner.Given("que eu navegue para a Tela de Login do SGP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 17
            testRunner.And("efetuar o login no sistema do SGP", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 18
            testRunner.And("que eu navegue para a Tela Home com a programacao selecionada", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
        }

        [TechTalk.SpecRun.ScenarioAttribute("01 - Criar listagem de cenarios incompativeis com sucesso", new string[] {
                "chrome",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 20)]
        public virtual void _01_CriarListagemDeCenariosIncompativeisComSucesso()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("01 - Criar listagem de cenarios incompativeis com sucesso", new string[] {
                        "chrome",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 21
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 22
            testRunner.When("eu criar listagem de incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 23
            testRunner.Then("eu visualizo listagem de incompativeis com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("02 - Filtrar cenarios incompativeis com sucesso", new string[] {
                "chrome",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 25)]
        public virtual void _02_FiltrarCenariosIncompativeisComSucesso()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("02 - Filtrar cenarios incompativeis com sucesso", new string[] {
                        "chrome",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 26
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 27
            testRunner.When("eu criar listagem de incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 28
            testRunner.And("eu filtrar cenarios incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 29
            testRunner.Then("eu visualizo listagem de incompativeis com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("03 - Alteracao de Cenarios Incompativeis", new string[] {
                "chrome",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 31)]
        public virtual void _03_AlteracaoDeCenariosIncompativeis()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("03 - Alteracao de Cenarios Incompativeis", new string[] {
                        "chrome",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 32
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 33
            testRunner.When("eu altere o cenario incompativel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 34
            testRunner.Then("eu visualizo listagem de incompativeis alterada com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("04 - Exclusao de Cenarios Incompativeis", new string[] {
                "chrome",
                "logout"}, SourceLine = 36)]
        public virtual void _04_ExclusaoDeCenariosIncompativeis()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("04 - Exclusao de Cenarios Incompativeis", new string[] {
                        "chrome",
                        "logout"});
#line 37
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 38
            testRunner.When("eu excluo o cenario incompativel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 39
            testRunner.Then("eu nao visualizo o cenario de incompativel com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("05 - Criacao de Nova Lista com Cenarios Incompativeis", new string[] {
                "chrome",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 41)]
        public virtual void _05_CriacaoDeNovaListaComCenariosIncompativeis()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("05 - Criacao de Nova Lista com Cenarios Incompativeis", new string[] {
                        "chrome",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 42
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 43
            testRunner.When("eu criar listagem de incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 44
            testRunner.Then("eu visualizo listagem de incompativeis com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("06 - Alteração de Lista", new string[] {
                "chrome",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 46)]
        public virtual void _06_AlteracaoDeLista()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("06 - Alteração de Lista", new string[] {
                        "chrome",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 47
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 48
            testRunner.When("eu altere o nome da lista incompativel", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 49
            testRunner.Then("eu visualizo o nome da listagem de incompativeis alterada com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("07 - Criação de Nova Lista sem Cenários Incompatíveis - Negativo", new string[] {
                "chrome",
                "logout"}, SourceLine = 51)]
        public virtual void _07_CriacaoDeNovaListaSemCenariosIncompativeis_Negativo()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("07 - Criação de Nova Lista sem Cenários Incompatíveis - Negativo", new string[] {
                        "chrome",
                        "logout"});
#line 52
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 53
            testRunner.When("eu criar listagem de incompativeis sem preencher os cenarios", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 54
            testRunner.Then("eu visualizo a mensagem de que nao e possivel realizar cadastro com menos de dois" +
                               " cenarios com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("10 - Validação do filtro por cenário", new string[] {
                "chrome",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 56)]
        public virtual void _10_ValidacaoDoFiltroPorCenario()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("10 - Validação do filtro por cenário", new string[] {
                        "chrome",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 57
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 58
            testRunner.When("eu criar listagem de incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 59
            testRunner.And("eu filtrar cenarios incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 60
            testRunner.Then("eu visualizo listagem de incompativeis com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("11 - Validação do filtro por ambiente", new string[] {
                "chrome",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 62)]
        public virtual void _11_ValidacaoDoFiltroPorAmbiente()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("11 - Validação do filtro por ambiente", new string[] {
                        "chrome",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 63
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 64
            testRunner.When("eu criar listagem de incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 65
            testRunner.And("eu filtrar cenarios incompativeis por ambiente", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 66
            testRunner.Then("eu visualizo listagem de incompativeis com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("12 - Validar LOG de alteração de cenários incompatíveis", new string[] {
                "chrome",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 68)]
        public virtual void _12_ValidarLOGDeAlteracaoDeCenariosIncompativeis()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("12 - Validar LOG de alteração de cenários incompatíveis", new string[] {
                        "chrome",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 69
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 70
            testRunner.Given("que eu tenha alterado uma nova lista de cenarios incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 71
            testRunner.When("eu faco uma consulta por cenario incompativel no log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 72
            testRunner.Then("eu visualizo a alteracao feita na lista de cenarios incompativeis no log com suce" +
                               "sso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("13 - Validar LOG de exclusão da lista de cenários incompatíveis", new string[] {
                "chrome",
                "logout"}, SourceLine = 74)]
        public virtual void _13_ValidarLOGDeExclusaoDaListaDeCenariosIncompativeis()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("13 - Validar LOG de exclusão da lista de cenários incompatíveis", new string[] {
                        "chrome",
                        "logout"});
#line 75
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 76
            testRunner.Given("que eu tenha excluido uma nova lista de cenarios incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 77
            testRunner.When("eu faco uma consulta por cenario incompativel no log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 78
            testRunner.Then("eu visualizo a lista de cenarios incompativeis no log com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("14 - Validar LOG de Exclusão de 1 item lista de cenários incompatíveis", new string[] {
                "chrome",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 80)]
        public virtual void _14_ValidarLOGDeExclusaoDe1ItemListaDeCenariosIncompativeis()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("14 - Validar LOG de Exclusão de 1 item lista de cenários incompatíveis", new string[] {
                        "chrome",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 81
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 82
            testRunner.Given("que eu tenha excluido todos um item da nova lista de cenarios incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 83
            testRunner.When("eu faco uma consulta por cenario incompativel no log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 84
            testRunner.Then("eu visualizo o cenario excluido da lista de cenarios incompativeis no log com suc" +
                               "esso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("15 - Validar LOG de exclusão de todos os itens lista de cenários incompatíveis", new string[] {
                "chrome",
                "logout"}, SourceLine = 86)]
        public virtual void _15_ValidarLOGDeExclusaoDeTodosOsItensListaDeCenariosIncompativeis()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("15 - Validar LOG de exclusão de todos os itens lista de cenários incompatíveis", new string[] {
                        "chrome",
                        "logout"});
#line 87
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 88
            testRunner.Given("que eu tenha excluido todos os itens da nova lista de cenarios incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 89
            testRunner.When("eu faco uma consulta por cenario incompativel no log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 90
            testRunner.Then("eu visualizo a lista de cenarios incompativeis excluida no log com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("16 - Validar LOG da função \"Salvar e Criar nova lista de incompatibilidade\"", new string[] {
                "chrome",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 92)]
        public virtual void _16_ValidarLOGDaFuncaoSalvarECriarNovaListaDeIncompatibilidade()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("16 - Validar LOG da função \"Salvar e Criar nova lista de incompatibilidade\"", new string[] {
                        "chrome",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 93
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 94
            testRunner.Given("que eu tenha criado duas listas de cenarios incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 95
            testRunner.When("eu faco uma consulta por cenario incompativel no log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 96
            testRunner.Then("eu visualizo as duas listas de cenarios incompativeis no log com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("17 - Criação de lista - Ambiente já associado", new string[] {
                "chrome",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 98)]
        public virtual void _17_CriacaoDeLista_AmbienteJaAssociado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("17 - Criação de lista - Ambiente já associado", new string[] {
                        "chrome",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 99
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 100
            testRunner.When("eu criar listagem de incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 101
            testRunner.And("criar uma nova listagem de cenarios incompativeis com o ambiente já cadastrado em" +
                               " outra lista", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 102
            testRunner.Then("eu visualizo o alerta de cenarios/ambientes já cadastrados com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("18 - Criação de lista cujo nome já pertence a uma lista criada", new string[] {
                "chrome",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 104)]
        public virtual void _18_CriacaoDeListaCujoNomeJaPertenceAUmaListaCriada()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("18 - Criação de lista cujo nome já pertence a uma lista criada", new string[] {
                        "chrome",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 105
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 106
            testRunner.When("eu criar listagem de incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 107
            testRunner.And("criar uma nova listagem de cenarios incompativeis com o mesmo nome", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 108
            testRunner.Then("eu visualizo o alerta lista já existente com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("19 - Criação de lista - Preenchimento de apenas 1 linha do cadastro", new string[] {
                "chrome",
                "logout"}, SourceLine = 110)]
        public virtual void _19_CriacaoDeLista_PreenchimentoDeApenas1LinhaDoCadastro()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("19 - Criação de lista - Preenchimento de apenas 1 linha do cadastro", new string[] {
                        "chrome",
                        "logout"});
#line 111
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 112
            testRunner.When("eu criar listagem de incompativeis preenchendo apenas uma linha de cenario/ambien" +
                               "te", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 113
            testRunner.Then("eu visualizo o alerta de que o cadastro nao e valido com apenas uma linha com suc" +
                               "esso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("20 - Validar LOG Criação de lista - Marcação \"Todos os Ambientes\"", new string[] {
                "chrome",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 115)]
        public virtual void _20_ValidarLOGCriacaoDeLista_MarcacaoTodosOsAmbientes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("20 - Validar LOG Criação de lista - Marcação \"Todos os Ambientes\"", new string[] {
                        "chrome",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 116
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 117
            testRunner.Given("que eu tenha criado uma nova lista de cenarios incompativeis marcando todos os am" +
                               "bientes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 118
            testRunner.When("eu faco uma consulta por cenario incompativel no log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 119
            testRunner.Then("eu visualizo a lista de cenarios incompativeis no log com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("21 - Alteração de Nome da Lista - Incluindo nome existente", new string[] {
                "chrome",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 121)]
        public virtual void _21_AlteracaoDeNomeDaLista_IncluindoNomeExistente()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("21 - Alteração de Nome da Lista - Incluindo nome existente", new string[] {
                        "chrome",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 122
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 123
            testRunner.When("eu criar duas listagem de cenarios incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 124
            testRunner.And("renomear um listagem de cenarios incompativeis com o mesmo nome de outra existent" +
                               "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 125
            testRunner.Then("eu visualizo o alerta ao tentar editar de lista já existente com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("22 - Criação de nova incompatibilidade em cenário já associado a uma cena de rote" +
            "iro liberado", new string[] {
                "chrome",
                "excluir_PlanejamentoRoteiro",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 127)]
        public virtual void _22_CriacaoDeNovaIncompatibilidadeEmCenarioJaAssociadoAUmaCenaDeRoteiroLiberado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("22 - Criação de nova incompatibilidade em cenário já associado a uma cena de rote" +
                    "iro liberado", new string[] {
                        "chrome",
                        "excluir_PlanejamentoRoteiro",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 128
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 129
            testRunner.Given("que eu tenha um roteiro liberado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 130
            testRunner.When("eu crio uma lista de cenarios incompativeis com cenario associado ao roteiro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 131
            testRunner.And("eu faco uma consulta por cenario incompativel no log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 132
            testRunner.Then("eu visualizo a lista de cenarios incompativeis associado a um roteiro no log com " +
                               "sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("23 - Alteração de incompatibilidade em cenário já associado a uma cena de roteiro" +
            " liberado", new string[] {
                "chrome",
                "excluir_PlanejamentoRoteiro",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 134)]
        public virtual void _23_AlteracaoDeIncompatibilidadeEmCenarioJaAssociadoAUmaCenaDeRoteiroLiberado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("23 - Alteração de incompatibilidade em cenário já associado a uma cena de roteiro" +
                    " liberado", new string[] {
                        "chrome",
                        "excluir_PlanejamentoRoteiro",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 135
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 136
            testRunner.Given("que eu tenha um roteiro liberado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 137
            testRunner.When("eu altero uma lista de cenarios incompativeis com cenario associado ao roteiro", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 138
            testRunner.And("eu faco uma consulta por cenario incompativel no log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 139
            testRunner.Then("eu visualizo a lista de cenarios incompativeis associado a um roteiro no log com " +
                               "sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("24 - Inclusão de nova incompatibilidade em cenário já associado a uma cena de rot" +
            "eiro liberado", new string[] {
                "chrome",
                "excluir_PlanejamentoRoteiro",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 141)]
        public virtual void _24_InclusaoDeNovaIncompatibilidadeEmCenarioJaAssociadoAUmaCenaDeRoteiroLiberado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("24 - Inclusão de nova incompatibilidade em cenário já associado a uma cena de rot" +
                    "eiro liberado", new string[] {
                        "chrome",
                        "excluir_PlanejamentoRoteiro",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 142
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 143
            testRunner.Given("que eu tenha um roteiro liberado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 144
            testRunner.When("eu altero uma lista de cenarios incompativeis com cenario associado ao roteiro in" +
                               "cluindo um novo cenario", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 145
            testRunner.And("eu faco uma consulta por cenario incompativel no log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 146
            testRunner.Then("eu visualizo a lista de cenarios incompativeis associado a um roteiro no log com " +
                               "sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("25 - Validar que inclusão de nova incompatibilidade para roteiro fechado não foi " +
            "impactado", new string[] {
                "chrome",
                "alterar_NovoStatusRoteiro",
                "excluir_PlanejamentoRoteiro",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 148)]
        public virtual void _25_ValidarQueInclusaoDeNovaIncompatibilidadeParaRoteiroFechadoNaoFoiImpactado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("25 - Validar que inclusão de nova incompatibilidade para roteiro fechado não foi " +
                    "impactado", new string[] {
                        "chrome",
                        "alterar_NovoStatusRoteiro",
                        "excluir_PlanejamentoRoteiro",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 149
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 150
            testRunner.Given("que eu tenha um roteiro fechado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line 151
            testRunner.When("eu altero uma lista de cenarios incompativeis com cenario associado ao roteiro in" +
                               "cluindo um novo cenario", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 152
            testRunner.And("eu faco uma consulta por cenario incompativel no log", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 153
            testRunner.Then("eu visualizo a lista de cenarios incompativeis associado a um roteiro no log com " +
                               "sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.ScenarioAttribute("26 - Criação de lista - Cenário já associado", new string[] {
                "chrome",
                "excluir_ListaCenarioIncompativel",
                "logout"}, SourceLine = 155)]
        public virtual void _26_CriacaoDeLista_CenarioJaAssociado()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("26 - Criação de lista - Cenário já associado", new string[] {
                        "chrome",
                        "excluir_ListaCenarioIncompativel",
                        "logout"});
#line 156
            this.ScenarioSetup(scenarioInfo);
#line 15
            this.FeatureBackground();
#line 157
            testRunner.When("eu criar listagem de incompativeis", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line 158
            testRunner.And("criar uma nova listagem de cenarios incompativeis com o cenario já cadastrado em " +
                               "outra lista", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line 159
            testRunner.Then("eu visualizo o alerta de cenarios/ambientes já cadastrados com sucesso", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
